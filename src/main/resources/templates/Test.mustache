<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>음악 리스트</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #eef2f3;
            margin: 0;
            padding: 20px;
            color: #333;
        }

        h1 {
            text-align: center;
            color: #566ca9;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #566ca9;
            color: white;
            text-transform: uppercase;
            letter-spacing: 0.1em;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        button {
            background-color: #566ca9;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s, transform 0.2s;
            font-weight: bold;
        }

        button:hover {
            background-color: #566ca9;
            transform: scale(1.05);
        }

        .playing {
            background-color: #aec0ec;
        }

        #controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

        input[type="text"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 200px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus {
            border-color: #566ca9;
            outline: none;
        }

        .custom-audio {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px auto;
            max-width: 500px;
        }

        #playPause {
            margin-bottom: 10px;
        }

        #seekSlider {
            width: 100%;
        }

        #volumeControl {
            width: 100%;
            margin-top: 10px;
        }

        #timeDisplay {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <h1>음악 리스트</h1>
    <table id="musicTable">
        <thead>
        <tr>
            <th>아티스트</th>
            <th>제목</th>
            <th>재생</th>
            <th>삭제</th>
        </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div class="custom-audio">
        <audio id="audioPlayer"></audio>
        <button id="playPause">재생</button>
        <label for="seekSlider">재생 시간</label><input type="range" id="seekSlider" min="0" max="100" value="0" step="1">
        <div id="timeDisplay">00:00 / 00:00</div>
        <label for="volumeControl">볼륨</label><input type="range" id="volumeControl" min="0" max="1" step="0.01" value="1">
        <div>
            <input type="checkbox" id="repeatCheckbox" checked>
            <label for="repeatCheckbox">반복 재생</label>
        </div>
    </div>

    <div id="controls">
        <label for="artist">가수: </label>
        <input type="text" id="artist" placeholder="가수를 입력하세요">
        <label for="title">노래: </label>
        <input type="text" id="title" placeholder="노래 제목을 입력하세요">
        <button id="send">음악 추가</button>
    </div>

    <script>
        let musicList = [];
        let currentIndex = -1;
        let isPlaying = false;
        let savedTime = 0;
        let audioPlayer = document.getElementById('audioPlayer');
        let stompClient = null;
        let repeatEnabled = document.getElementById("repeatCheckbox").checked;

        fetch("/api/v1/{{playlistId}}/{{name}}").then(response => {
            console.log(response)
        });
        connect(); // 웹소켓 연결

        const socket = new WebSocket("wss://kr-ss{{serverId}}.chat.naver.com/chat");

        socket.onopen = function () {
            console.log("치지직 웹소켓과 연결되었습니다.")
            // 첫 번째 요청 전송
            let initialRequest = {
                "ver": "2",
                "cmd": 100,
                "svcid": "game",
                "cid": '{{chatChannelId}}',
                "bdy": {
                    "uid": null,
                    "devType": 2001,
                    "accTkn": '{{accessToken}}',
                    "auth": "READ"
                },
                "tid": 1
            };

            socket.send(JSON.stringify(initialRequest));

            // 서버 메시지를 대기
            socket.onmessage = function (event) {
                let data = JSON.parse(event.data); // -> String 타입임
                stompClient.send("/app/api/v1/chat/{{playlistId}}", {}, JSON.stringify(data));

                // 연결 체크 메시지 응답 처리
                if (data.ver === "2" && data.cmd === 0) {
                    socket.send(JSON.stringify({ "ver": "2", "cmd": 10000 }));
                }
            };

            // 20초마다 연결 체크 메시지 전송
            setInterval(function () {
                socket.send(JSON.stringify({ "ver": "2", "cmd": 0 }));
            }, 1000);
        };

        function connect() {
            const socket = new SockJS('/wss');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function (frame) {
                console.log('웹소켓에 연결되었습니다: ' + frame);
                stompClient.subscribe('/sub/message/{{playlistId}}', function(message) {
                    const musicData = JSON.parse(message.body);
                    const exists = musicList.some(music => music.title === musicData.title && music.artist === musicData.artist);
                    if (!exists) {
                        addMusicToList(musicData);
                    }
                });
            });
        }

        // 음악 추가 메시지 전송 함수
        function sendMessage() {
            stompClient.send("/app/api/v1/message/{{playlistId}}", {}, JSON.stringify({
                artist: document.getElementById("artist").value,
                title: document.getElementById("title").value
            }));
        }

        // 재생 및 일시정지 버튼 클릭 이벤트 리스너
        document.getElementById("playPause").addEventListener("click", function() {
            if (musicList.length > 0) {
                if (!isPlaying) {
                    if (currentIndex === -1) {
                        currentIndex = 0; // 첫 곡 재생
                        playCurrentAudio();
                    } else {
                        audioPlayer.currentTime = savedTime; // 저장된 시간에서 재생
                        audioPlayer.play();
                    }
                    isPlaying = true;
                    this.textContent = '일시정지';
                } else {
                    audioPlayer.pause(); // 음악 일시정지
                    savedTime = audioPlayer.currentTime; // 현재 시간을 저장
                    isPlaying = false;
                    this.textContent = '재생';
                }
            }
        });

        document.getElementById("volumeControl").addEventListener("input", function() {
            audioPlayer.volume = this.value;
        });

        document.getElementById("seekSlider").addEventListener("input", function() {
            audioPlayer.currentTime = audioPlayer.duration * (this.value / 100);
        });

        audioPlayer.addEventListener("timeupdate", function() {
            updateSeekSlider();
            updateTimeDisplay();
        });

        audioPlayer.addEventListener("ended", function() {
            if (repeatEnabled) {
                // 반복 재생이 활성화된 경우
                if (currentIndex === musicList.length - 1) {
                    // 현재 곡이 마지막 곡인 경우
                    currentIndex = 0; // 첫 곡으로 돌아감
                } else {
                    currentIndex++; // 다음 곡으로 이동
                }
                playCurrentAudio(); // 현재 곡 재생
            } else {
                // 반복 재생이 비활성화된 경우
                if (currentIndex < musicList.length - 1) {
                    currentIndex++;
                    playCurrentAudio();
                } else {
                    isPlaying = false;
                    currentIndex = -1;
                    document.getElementById("playPause").textContent = '재생';
                }
            }
        });

        document.getElementById("send").addEventListener("click", function() {
            if (document.getElementById("artist").value === '' && document.getElementById("title").value === '') {
                console.log("아티스트 이름과 노래 제목을 넣어주세요!");
            } else {
                sendMessage();
                document.getElementById("artist").value = '';
                document.getElementById("title").value = '';
            }
        });

        document.getElementById("repeatCheckbox").addEventListener("change", function() {
            repeatEnabled = this.checked;
        });

        // 음악 목록에 음악 추가 함수
        function addMusicToList(musicData) {
            musicList.push(musicData);
            updateMusicTable(musicData);

            // 만약 마지막 곡이 끝난 후 새로운 곡이 추가되었을 때
            if (currentIndex === -1 || (currentIndex === musicList.length - 1 && !isPlaying)) {
                // 현재 곡이 끝났거나, 음악이 재생 중이지 않으면 현재 음악 재생
                currentIndex = musicList.length - 1; // 마지막으로 추가된 곡 인덱스 설정
                playCurrentAudio(); // 마지막 곡 재생
                document.getElementById("playPause").textContent = '일시정지';
            }
        }

        // 음악 테이블 업데이트 함수
        function updateMusicTable() {
            const tbody = document.getElementById('musicTable').querySelector('tbody');
            tbody.innerHTML = ''; // 기존 내용을 초기화

            musicList.forEach((musicData, index) => {
                const row = document.createElement('tr');
                const artistCell = document.createElement('td');
                const titleCell = document.createElement('td');
                const buttonCell = document.createElement('td');
                const deleteCell = document.createElement('td');

                artistCell.textContent = musicData.artist; // 아티스트 표시
                titleCell.textContent = musicData.title; // 제목 표시

                // 재생 버튼 추가
                const playButton = document.createElement('button');
                playButton.textContent = '재생';
                playButton.onclick = () => playAudio(index); // 클릭 시 해당 곡 재생

                // 삭제 버튼 추가
                const deleteButton = document.createElement('button');
                deleteButton.textContent = '삭제';
                deleteButton.onclick = () => {
                    fetch(`/api/v1/delete/{{playlistId}}/${musicData.artist}/${musicData.title}`, { method: 'DELETE' }).then(response => {
                        if (response.ok) {
                            handleMusicDelete(index); // 음악 삭제 처리
                        }
                    });
                };

                buttonCell.appendChild(playButton); // 재생 버튼 추가
                deleteCell.appendChild(deleteButton); // 삭제 버튼 추가
                row.appendChild(artistCell); // 아티스트 셀 추가
                row.appendChild(titleCell); // 제목 셀 추가
                row.appendChild(buttonCell); // 버튼 셀 추가
                row.appendChild(deleteCell); // 삭제 셀 추가
                tbody.appendChild(row); // 테이블에 행 추가
            });
            highlightCurrentRow(); // 현재 곡 강조 유지
        }

        function handleMusicDelete(index) {
            if (musicList.length === 0) {
                audioPlayer.pause(); // 모든 곡이 삭제되면 음악 멈춤
                isPlaying = false;
                document.getElementById("playPause").textContent = '재생';
                currentIndex = -1; // 인덱스 초기화
            } else {
                if (index === currentIndex) {
                    musicList.splice(index, 1); // 현재 곡 삭제
                    if (musicList.length === 0) {
                        audioPlayer.pause(); // 모든 곡이 삭제되면 음악 멈춤
                        isPlaying = false;
                        document.getElementById("playPause").textContent = '재생'; // 버튼 텍스트 변경
                        currentIndex = -1; // 인덱스 초기화
                    } else {
                        // 현재 곡 삭제 후 마지막 곡일 때
                        if (musicList.length === 1) {
                            audioPlayer.pause(); // 음악 멈춤
                            isPlaying = false;
                            document.getElementById("playPause").textContent = '재생'; // 버튼 텍스트 변경
                            currentIndex = -1; // 인덱스 초기화
                        } else {
                            // 체크박스가 체크되지 않은 상태에서 마지막 곡이 삭제될 때
                            if (!document.getElementById("repeatCheckbox").checked && currentIndex === musicList.length) {
                                audioPlayer.pause(); // 음악을 일시 정지
                                isPlaying = false;
                                document.getElementById("playPause").textContent = '재생'; // 버튼 텍스트 변경
                                currentIndex = -1; // 인덱스 초기화
                            } else {
                                // 삭제한 곡이 마지막 곡이 아닌 경우
                                if (currentIndex === musicList.length) {
                                    currentIndex = 0; // 첫 곡으로 돌아감 (이 부분은 필요 시 제거)
                                }
                                playCurrentAudio(); // 다음 곡 재생
                            }
                        }
                    }
                } else {
                    musicList.splice(index, 1); // 리스트에서 곡 삭제
                    if (index < currentIndex) {
                        currentIndex--; // 삭제한 곡이 현재 곡 인덱스보다 앞에 있을 경우 인덱스 조정
                    }
                }
            }
            updateMusicTable();
        }

        // 특정 인덱스의 음악 재생 함수
        function playAudio(index) {
            currentIndex = index; // 현재 인덱스 설정
            playCurrentAudio(); // 음악 재생
        }

        // 현재 곡 재생 함수
        function playCurrentAudio() {
            if (currentIndex >= 0 && currentIndex < musicList.length) {
                const musicData = musicList[currentIndex];
                const byteCharacters = atob(musicData.musicFileBytes);
                const byteNumbers = new Uint8Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
                const url = URL.createObjectURL(blob);
                audioPlayer.src = url;
                audioPlayer.play();
                isPlaying = true;
                document.getElementById("playPause").textContent = '일시정지';
                highlightCurrentRow(); // Highlight the current row
            }
        }

        function playNextAudio() {
            currentIndex++;
            if (currentIndex < musicList.length) {
                playCurrentAudio();
            } else {
                currentIndex = 0; // 반복 재생 시 첫 곡으로 돌아감
                playCurrentAudio();
            }
        }

        // 현재 곡 강조 함수
        function highlightCurrentRow() {
            const rows = document.querySelectorAll('#musicTable tbody tr');
            rows.forEach((row, index) => {
                if (index === currentIndex) {
                    row.style.backgroundColor = '#e0e0e0'; // 현재 곡 강조 색상
                } else {
                    row.style.backgroundColor = ''; // 기본 색상으로 복구
                }
            });
        }

        // Seek 슬라이더 업데이트
        function updateSeekSlider() {
            const seekSlider = document.getElementById('seekSlider');
            if (audioPlayer.duration > 0) {
                seekSlider.value = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            }
        }

        // 시간 표시 업데이트
        function updateTimeDisplay() {
            const timeDisplay = document.getElementById('timeDisplay');
            const currentTime = formatTime(audioPlayer.currentTime);
            const duration = formatTime(audioPlayer.duration);
            timeDisplay.textContent = `${currentTime} / ${duration}`;
        }

        // 시간 포맷팅
        function formatTime(seconds) {
            if (isNaN(seconds)) return '00:00'; // NaN 처리
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
        }

        // 음악 리스트 초기화 및 갱신
        function list() {
            fetch("/api/v1/list/{{playlistId}}")
                .then(response => response.json())
                .then(data => {
                    musicList = data;
                    updateMusicTable();
                });
        }

        list();
    </script>
</body>
</html>