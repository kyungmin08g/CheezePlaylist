<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>음악 리스트</title>
    <script src="/webjars/jquery/jquery.min.js"></script>
    <script src="/webjars/sockjs-client/sockjs.min.js"></script>
    <script src="/webjars/stomp-websocket/stomp.min.js"></script>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        button {
            padding: 5px 10px;
        }

        .playing {
            background-color: #e0e0e0; /* 현재 재생 중인 음악 강조하기 위함 */
        }
    </style>
</head>
<body>
    <h1>음악 리스트</h1>
    <table id="musicTable">
        <thead>
        <tr>
            <th>제목</th>
            <th>재생</th>
        </tr>
        </thead>
        <tbody></tbody>
    </table>

    <audio id="audioPlayer" controls></audio>

    <button id="send">음악 추가</button>

    <script>
        var stompClient = null;
        let musicList = [];
        let currentIndex = 0;
        let currentRow = null; // 현재 재생 중인 곡의 행을 저장할 변수

        $(document).ready(function() {
            console.log("페이지 로딩 중..");
            connect();

            $("#send").click(function() {
                sendMessage();
            });
        });

        function connect() {
            var socket = new SockJS('/ws');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function (frame) {
                console.log('웹소켓에 연결되었습니다: ' + frame);

                stompClient.subscribe('/sub/message/{{id}}', function(message) {
                    const musicData = JSON.parse(message.body);
                    const name = JSON.parse(message.body).name;
                    console.log(name)

                    const exists = musicList.some(music => music.name === musicData.name);
                    if (!exists) {
                        addMusicToList(musicData); // 새로운 음악 데이터 추가
                    }
                });
            });
        }

        function sendMessage() {
            console.log("메시지를 보냈습니다.");
            stompClient.send("/app/message/{{id}}", {}, JSON.stringify({ artist: 'GEMINI', title: 'MIA' }));
        }

        function addMusicToList(musicData) {
            musicList.push(musicData); // 음악 데이터 배열에 추가
            updateMusicTable(); // 테이블 업데이트
        }

        function updateMusicTable() {
            const tbody = document.getElementById('musicTable').querySelector('tbody');
            tbody.innerHTML = ''; // 기존 내용을 초기화

            musicList.forEach((musicData, index) => {
                const row = document.createElement('tr');
                const titleCell = document.createElement('td');
                const buttonCell = document.createElement('td');

                titleCell.textContent = musicData.name; // 음악 제목

                const playButton = document.createElement('button');
                playButton.textContent = '재생';
                playButton.onclick = () => playAudio(index); // 클릭 시 해당 곡 재생

                buttonCell.appendChild(playButton);
                row.appendChild(titleCell);
                row.appendChild(buttonCell);
                tbody.appendChild(row);
            });
        }

        function playAudio(index) {
            currentIndex = index;
            playCurrentAudio();
        }

        function playCurrentAudio() {
            if (currentIndex < musicList.length) {
                const musicData = musicList[currentIndex];
                const byteCharacters = atob(musicData.data); // Base64 문자열 디코딩
                const byteNumbers = new Uint8Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
                const url = URL.createObjectURL(blob);

                const audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.src = url;
                audioPlayer.play();

                highlightCurrentRow(); // 재생 중인 음악 제목 강조

                // 오디오가 끝났을 때 다음 곡 재생
                audioPlayer.onended = () => {
                    currentIndex++;
                    if (currentIndex >= musicList.length) {
                        currentIndex = 0; // 마지막 곡이 끝나면 처음으로 돌아감
                    }
                    playCurrentAudio(); // 다음 음악 재생
                };
            }
        }

        function highlightCurrentRow() {
            const tbody = document.getElementById('musicTable').querySelector('tbody');
            const rows = tbody.querySelectorAll('tr');

            // 이전에 강조된 행이 있다면 클래스 제거
            if (currentRow) {
                currentRow.classList.remove('playing');
            }

            // 현재 재생 중인 행에 강조 클래스 추가
            currentRow = rows[currentIndex];
            currentRow.classList.add('playing');
        }

        function list() {
            fetch("/list")
                .then(response => response.json())
                .then(data => {
                    musicList = data;
                    updateMusicTable(); // 가져온 데이터로 테이블 업데이트
                });
        }

        // 초기 음악 리스트 가져오기
        list();
    </script>
</body>
</html>

