<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>음악 리스트</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #2e2b45;
            margin: 0;
            padding: 20px;
            color: #fff;
        }

        h1 {
            text-align: center;
            color: rgb(207, 207, 207);
            margin-bottom: 30px;
        }

        #musicContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 0;
            max-height: 80vh;
            overflow-y: auto;
        }

        .music-card {
            background: #3b3a5e;
            border-radius: 8px;
            padding: 15px;
            margin: 5px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s, box-shadow 0.3s;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            opacity: 0;
            animation: fadeIn 0.5s forwards;
            height: 60px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .music-card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
        }

        .music-info {
            text-align: left;
            flex: 1;
        }

        .music-title {
            font-size: 1.2em;
            font-weight: 500;
            margin: 0;
        }

        .music-artist {
            font-size: 0.8em;
            color: #bbb;
        }

        .button-group {
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        button {
            background-color: #566ca9;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s, transform 0.2s;
            font-weight: bold;
            font-size: 0.9em;
        }

        button:hover {
            background-color: #455a8c;
            transform: scale(1.05);
        }

        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

        input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 200px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus {
            border-color: #566ca9;
            outline: none;
        }

        .custom-audio {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px auto;
            max-width: 500px;
        }

        #seekSlider, #volumeControl {
            width: 100%;
            margin-top: 10px;
        }

        @media (max-width: 768px) {
            .music-card {
                flex-direction: column;
                align-items: flex-start;
                height: auto;
            }

            .button-group {
                flex-direction: column;
                align-items: stretch;
            }

            button {
                width: 100%;
            }

            .music-title {
                font-size: 1.1em;
            }

            .music-artist {
                font-size: 0.8em;
            }
        }

        @media (max-width: 480px) {
            input[type="text"] {
                width: 150px;
            }

            h1 {
                font-size: 1.5em;
            }
        }
    </style>
</head>
<body>
    <h1>{{playlistName}}</h1>
    <div id="musicContainer"></div>

    <div class="custom-audio">
        <audio id="audioPlayer"></audio>
        <button id="playPause">재생</button>
        <label for="seekSlider">재생 시간</label>
        <input type="range" id="seekSlider" min="0" max="100" value="0" step="1">
        <div id="timeDisplay">00:00 / 00:00</div>
        <label for="volumeControl">볼륨</label>
        <input type="range" id="volumeControl" min="0" max="1" step="0.01" value="1">
        <div>
            <input type="checkbox" id="repeatCheckbox" checked>
            <label for="repeatCheckbox">반복 재생</label>
        </div>
    </div>

    <div class="controls">
        <label for="artist">가수: </label>
        <input type="text" id="artist" placeholder="가수를 입력하세요">
        <label for="title">노래: </label>
        <input type="text" id="title" placeholder="노래 제목을 입력하세요">
        <button id="send">음악 추가</button>
    </div>
    <script>
        let musicList = [];
        let currentIndex = -1;
        let isPlaying = false;
        let savedTime = 0;
        let audioPlayer = document.getElementById('audioPlayer');
        let stompClient = null;
        let repeatEnabled = document.getElementById("repeatCheckbox").checked;

        connect();

        const socket = new WebSocket("wss://kr-ss{{serverId}}.chat.naver.com/chat");

        socket.onopen = function () {
            console.log("치지직 웹소켓과 연결되었습니다.")
            let initialRequest = {
                "ver": "2",
                "cmd": 100,
                "svcid": "game",
                "cid": '{{chatChannelId}}',
                "bdy": {
                    "uid": null,
                    "devType": 2001,
                    "accTkn": '{{accessToken}}',
                    "auth": "READ"
                },
                "tid": 1
            };

            socket.send(JSON.stringify(initialRequest));

            socket.onmessage = function (event) {
                let data = JSON.parse(event.data);
                stompClient.send("/app/api/v1/chat/{{playlistId}}", {}, JSON.stringify(data));

                if (data.ver === "2" && data.cmd === 0) {
                    socket.send(JSON.stringify({ "ver": "2", "cmd": 10000 }));
                }
            };

            // 20초마다 연결 체크 메시지 전송
            setInterval(function () {
                socket.send(JSON.stringify({ "ver": "2", "cmd": 0 }));
            }, 1000);
        };

        function connect() {
            const socket = new SockJS('/wss');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function (frame) {
                console.log('웹소켓에 연결되었습니다: ' + frame);
                stompClient.subscribe('/sub/message/{{playlistId}}', function(message) {
                    const musicData = JSON.parse(message.body);
                    const exists = musicList.some(music => music.title === musicData.title && music.artist === musicData.artist);
                    if (!exists) {
                        addMusicToList(musicData);
                    }
                });
            });
        }

        function sendMessage() {
            stompClient.send("/app/api/v1/message/{{playlistId}}", {}, JSON.stringify({
                artist: document.getElementById("artist").value,
                title: document.getElementById("title").value
            }));
        }

        document.getElementById("playPause").addEventListener("click", function() {
            if (musicList.length > 0) {
                if (!isPlaying) {
                    if (currentIndex === -1) {
                        currentIndex = 0; // 첫 곡 재생
                        playCurrentAudio();
                    } else {
                        audioPlayer.currentTime = savedTime; // 저장된 시간에서 재생
                        audioPlayer.play();
                    }
                    isPlaying = true;
                    this.textContent = '일시정지';
                } else {
                    audioPlayer.pause(); // 음악 일시정지
                    savedTime = audioPlayer.currentTime; // 현재 시간을 저장
                    isPlaying = false;
                    this.textContent = '재생';
                }
            }
        });

        audioPlayer.addEventListener("ended", function() {
            if (currentIndex < musicList.length - 1) {
                currentIndex++;
                playCurrentAudio();
            } else if (repeatEnabled) {
                currentIndex = 0;
                playCurrentAudio();
            } else {
                isPlaying = false;
                document.getElementById("playPause").textContent = '재생';
            }
        });

        function playCurrentAudio() {
            const currentMusic = musicList[currentIndex];
            console.log(currentMusic);

            const byteCharacters = atob(currentMusic.musicFileBytes);
            const byteNumbers = new Uint8Array(byteCharacters.length);

            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }

            const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
            const url = URL.createObjectURL(blob);

            audioPlayer.src = url;
            audioPlayer.play().then(() => {
                document.getElementById("playPause").textContent = '일시정지';
                updateSeekSlider();
            }).catch((error) => {
                console.error("재생 중 오류 발생:", error);
            });
        }

        function addMusicToList(musicData) {
            musicList.push(musicData);
            renderMusicList();
        }

        function renderMusicList() {
            const musicContainer = document.getElementById("musicContainer");
            musicContainer.innerHTML = ''; // 이전 음악 리스트를 지우기
            musicList.forEach((music, index) => {
                const musicCard = document.createElement("div");
                musicCard.className = "music-card";
                musicCard.innerHTML = `
                            <div class="music-info">
                                <h2 class="music-title">${music.title}</h2>
                                <p class="music-artist">${music.artist}</p>
                            </div>
                            <div class="button-group">
                                <button onclick="playMusic(${index})">재생</button>
                                <button onclick="removeMusic(${index})">삭제</button>
                            </div>
                        `;
                musicContainer.appendChild(musicCard);
                musicCard.style.opacity = 1; // 페이드 인 효과를 위해 초기 opacity 설정
            });
        }

        function playMusic(index) {
            currentIndex = index;
            playCurrentAudio();
        }

        function removeMusic(index) {
            musicList.splice(index, 1);
            if (index < currentIndex) {
                currentIndex--; // 삭제된 곡의 인덱스가 현재 인덱스보다 작으면 인덱스 조정
            }
            if (currentIndex >= musicList.length) {
                currentIndex = musicList.length - 1; // 현재 인덱스가 리스트의 범위를 넘지 않도록 조정
            }
            renderMusicList();
        }

        document.getElementById("send").addEventListener("click", function() {
            sendMessage();
        });

        document.getElementById("repeatCheckbox").addEventListener("change", function() {
            repeatEnabled = this.checked;
        });

        function updateSeekSlider() {
            const seekSlider = document.getElementById("seekSlider");
            seekSlider.max = audioPlayer.duration;
            seekSlider.value = audioPlayer.currentTime;

            setInterval(() => {
                seekSlider.value = audioPlayer.currentTime;
                document.getElementById("timeDisplay").innerText = formatTime(audioPlayer.currentTime) + " / " + formatTime(audioPlayer.duration);
            }, 1000);
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs < 10 ? '0' + secs : secs}`;
        }

        async function list() {
            await fetch("/api/v1/list/{{playlistId}}").then(response => response.json()).then(data => {
                musicList = data;
                renderMusicList();
            });
        }

        list();
    </script>
</body>
</html>