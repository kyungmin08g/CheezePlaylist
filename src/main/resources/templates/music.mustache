<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CheezePlaylist - {{playlistName}}</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Itim&display=swap');

        body {
            font-family: 'Roboto', sans-serif;
            background-color: #eeeeee;
            margin: 0;
            padding: 20px;
            color: #333333;
        }

        h1 {
            text-align: center;
            color: rgb(35, 35, 35);
            margin-bottom: 30px;
            font-family: "Itim", cursive;
            font-weight: 400;
            font-style: normal;
        }

        #musicContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 0;
            max-height: 80vh;
            overflow-y: auto;
        }

        .music-card {
            background: #3b3a5e;
            border-radius: 8px;
            padding: 15px;
            margin: 5px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s, box-shadow 0.3s;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            opacity: 0;
            animation: fadeIn 0.5s forwards;
            height: 60px;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .music-card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
        }

        .music-info {
            text-align: left;
            flex: 1;
        }

        .music-title {
            font-size: 1.2em;
            font-weight: 500;
            margin: 0;
        }

        .music-artist {
            font-size: 0.8em;
            color: #bbb;
        }

        .button-group {
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        button {
            background-color: #566ca9;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s, transform 0.2s;
            font-weight: bold;
            font-size: 0.9em;
        }

        button:hover {
            background-color: #455a8c;
            transform: scale(1.05);
        }

        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

        input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 200px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus {
            border-color: #566ca9;
            outline: none;
        }

        #seekSlider, #volumeControl {
            width: 100%;
            margin-top: 10px;
        }

        #times {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            max-width: 800px;
            padding: 10px;
            padding-bottom: 0;
            border-radius: 8px;
        }

        #seekSlider {
            flex-grow: 1;
            margin: 0 12px;
        }

        #seekSlider {
            -webkit-appearance: none;
            width: 300px;
            height: 2px;
            background: rgb(112, 112, 112);
            border-radius: 5px;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }

        #seekSlider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            background: rgb(0, 0, 0);
            border-radius: 50%;
            cursor: pointer;
        }

        #seekSlider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            background: rgb(0, 0, 0);
            border-radius: 50%;
            cursor: pointer;
        }

        #playing-time {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-grow: 1;
        }

        .time {
            color: #000000;
            font-family: "Itim", cursive;
            font-weight: 400;
            font-style: normal;
            width: 42px;
        }

        #audio {
            width: 26px;
            height: 18px;
            margin-right: 7px;
        }

        #volumeControl {
            width: 100px;
            margin-bottom: 10px;
            -webkit-appearance: none;
            height: 2px;
            background: rgb(0, 0, 0);
            border-radius: 5px;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }

        #volumeControl::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 12px;
            height: 12px;
            background: rgb(0, 0, 0);
            border-radius: 50%;
            cursor: pointer;
        }

        #volumeControl::-moz-range-thumb {
            width: 12px;
            height: 12px;
            background: rgb(0, 0, 0);
            border-radius: 50%;
            cursor: pointer;
        }

        #audio-icon {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            max-width: 800px;
            padding: 10px;
            border-radius: 8px;
        }

        #sound {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 13px;
        }

        #before {
            width: 25px;
            height: 25px;
            margin-bottom: 10px;
            margin-left: 0px;
        }

        #reproduction {
            width: 40px;
            height: 40px;
            margin-bottom: 10px;
        }

        #next {
            width: 25px;
            height: 25px;
            margin-bottom: 10px;
            margin-right: 105px;
        }

        #repeat {
            width: 23px;
            height: 23px;
            margin-bottom: 10px;
        }

        #music {
            width: 60px;
            height: 60px;
            margin-bottom: 20px;
            margin-left: 40px;
        }

        #musicTable {
            color: #000000;
        }

        #title-div {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 610px;
            margin-left: 11px;
        }

        #title {
            color: #272727;
            font-family: "Itim", cursive;
            font-weight: 400;
            font-style: normal;
            padding-left: 26px;
        }

        #title1 {
            color: #272727;
            font-family: "Itim", cursive;
            font-weight: 400;
            font-style: normal;
        }

        .custom-audio {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px auto;
            max-width: 500px;
        }

        #controller {
            position: fixed;
            bottom: 4%;
            left: 50%;
            transform: translateX(-50%);
            width: 100%;
            max-width: 600px;
            height: 100px;
            padding: 10px;
            border-radius: 8px;
        }

        table {
            position: fixed;
            top: 8%;
            left: 50%;
            transform: translateX(-50%);
            display: block;
            overflow-x: hidden;
            overflow-y: auto;
            max-height: 670px;
            width: 837px;
            height: 100%;
            border-collapse: collapse;
            border-spacing: 0;
        }

        tbody {
            display: block;
            max-height: 100%;
            width: 837px;
        }

        thead th {
            position: sticky;
            width: 837px;
            top: 0;
            z-index: 1;
            background-color: #eeeeee;
        }

        thead th::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 1px;
            background-color: #383838;
        }

        th:first-child,
        td:first-child {
            text-align: left;
        }

        td:last-child {
            width: 100px;
            padding-right: 24px;
            text-align: end;
        }

        th:last-child {
            padding-left: 0;
            padding-right: 10px;
        }

        thead th:nth-child(3) {
            padding-left: 100px;
        }

        tbody td:nth-child(3) {
            padding-left: 16px;
        }

        thead th:nth-child(4) {
            padding-left: 0;
        }

        tbody td:nth-child(4) {
            padding-left: 34px;
        }

        thead th:not(:first-child, :last-child),
        tbody td:not(:first-child, :last-child) {
            text-align: left;
            min-width: 179px;
        }

        th, td {
            padding-top: 7px;
            padding-bottom: 7px;
            padding-left: 16px;
        }

        table::-webkit-scrollbar {
            display: none;
        }

        tbody::-webkit-scrollbar {
            display: none;
        }

        tbody tr td:first-child {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }

        tbody tr td:last-child {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        tbody tr:hover td:first-child {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }

        tbody tr:hover td:last-child {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        th {
            color: #454545;
            text-transform: uppercase;
            font-size: 12px;
        }

        tbody tr {
            font-family: "Itim", cursive;
            font-weight: 400;
            font-style: normal;
            color: #515151;
        }

        tbody tr:hover {
            background-color: #e2e2e2;
        }

        tbody tr:hover td {
            background-color: #e2e2e2;
        }

        .song-title {
            font-size: 16px;
            color: #22a04e;
            display: block;
            width: 226px;
            padding-left: 12px;
        }

        .artist {
            font-size: 14px;
            color: #b3b3b3;
            display: block;
            width: 226px;
            padding-left: 12px;
        }

        #table-reproduction {
            width: 26px;
            height: 26px;
        }

        #delete {
            width: 16px;
            height: 16px;
            padding-top: 2px;
        }

        #audio-a {
            margin-top: 4px;
        }

        #plus-a {
            margin-right: 12px;
        }

        #plus {
            width: 22px;
            height: 20px;
            margin-top: 10px;
            text-align: end;
        }

        @keyframes fadeInBackground {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes fadeInControls {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }

        @keyframes fadeOutControls {
            from { opacity: 1; transform: scale(1); }
            to { opacity: 0; transform: scale(0.9); }
        }

        #controls {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 10px;
            padding: 20px;
            padding-left: 30px;
            padding-right: 30px;
            background-color: rgb(238, 238, 238);
            border-radius: 8px;
            max-width: 300px;
            width: 80%;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            text-align: center;

            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.5s ease-in-out, visibility 0.4s ease-out;
        }

        #label {
            width: 312px;
            text-align: left;
            color: #333;
            font-size: 0.9rem;
            margin-bottom: 5px;
        }

        #artist[type="text"] {
            width: 100%;
            padding: 8px;
            font-size: 0.9rem;
            border: 1px solid #d7d7d7;
            border-radius: 4px;
            background-color: #eeeeee;
            transition: box-shadow 0.3s ease;
        }

        #artist[type="text"]:focus {
            outline: none;
            border-color: #363636;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }

        #musicTitle[type="text"] {
            width: 100%;
            padding: 8px;
            font-size: 0.9rem;
            border: 1px solid #d7d7d7;
            border-radius: 4px;
            background-color: #eeeeee;
            transition: box-shadow 0.3s ease;
        }

        #musicTitle[type="text"]:focus {
            outline: none;
            border-color: #363636;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }

        #send {
            padding: 8px 16px;
            font-size: 0.9rem;
            color: white;
            background-color: #363636;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        #send:hover {
            background-color: #333333;
            transform: translateY(-2px);
        }

        .button-group {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        #cancel {
            padding: 8px 16px;
            font-size: 0.9rem;
            color: white;
            background-color: #5c5c5c;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        #cancel:hover {
            background-color: #525252;
            transform: translateY(-2px);
        }

        .album {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 38px;
            height: 38px;
            margin-left: 14px;
            border-radius: 5px;
        }

        .album2 {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 41px;
            height: 40px;
            margin-left: 12.5px;
            border-radius: 5px;
        }

        .image-div {
            display: flex;
        }

        .title-div {
            display: block;
        }
    </style>
</head>
<body>
<!--    <h1>{{playlistName}}</h1>-->
    <div id="controls">
        <label id="label" for="artist">아티스트:</label>
        <input type="text" id="artist" placeholder="아티스트를 입력하세요">
        <label for="musicTitle" id="label">제목:</label>
        <input type="text" id="musicTitle" placeholder="노래 제목을 입력하세요">

        <div class="button-group">
            <button id="send" onclick="add()">추가</button>
            <button id="cancel" onclick="cancel()">취소</button>
        </div>
    </div>

    <table id="musicTable">
        <thead id="thead">
            <tr>
                <th id="number">#</th>
                <th>제목</th>
                <th>시간</th>
                <th>후원자</th>
                <th>삭제</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div class="custom-audio">
        <audio id="audioPlayer"></audio>
        <div id="controller">
            <div id="title-div">
                <p id="title1"> </p>
                <p id="title">-</p>
                <a href="javascript:void(0);" onclick="create()" id="plus-a"><img src="plus.png" id="plus"></a>
            </div>
            <div id="times">
                <div id="playing-time">
                    <div class="time" id="current-time">00:00</div>
                    <input type="range" id="seekSlider" min="0" max="100" value="0" step="1">
                    <div class="time" id="total-time">00:00</div>
                </div>
            </div>

            <div id="audio-icon">
                <div id="sound">
                    <a href="javascript:void(0);" id="audio-a" onclick="audioSound()"><img src="audio_negative.png" id="audio"></a>
                    <input type="range" id="volumeControl" min="0" max="1" step="0.01" value="1">
                </div>
                <a href="javascript:void(0);" onclick="beforePlay()" id="before-a"><img src="before.png" id="before"></a>
                <a href="javascript:void(0);" onclick="play()"><img src="stop.png" id="reproduction"></a>
                <a href="javascript:void(0);" onclick="nextPlay()" id="next-a"><img src="next.png" id="next"></a>
                <a href="javascript:void(0);" id="repeat-a"><img src="repeat.png" id="repeat"></a>
            </div>
        </div>
    </div>

    <script>
        let musicList = [];
        let currentIndex = 0;
        let isPlaying = false;
        let savedTime = '00:00';
        let stompClient = null;
        let count = 0;
        let playCount = 0;
        let index = 0;

        let audioPlayer = document.getElementById('audioPlayer');
        const repeatLink = document.getElementById('repeat-a');
        const repeat = document.getElementById('repeat');
        const seekSlider = document.getElementById('seekSlider');
        const volumeControl = document.getElementById('volumeControl');
        const currentTime = document.getElementById("current-time");
        const totalTime = document.getElementById("total-time");
        const reproduction = document.getElementById('reproduction');
        const controller = document.getElementById("controller");
        const table = document.getElementById("musicTable");
        const controls = document.getElementById('controls');
        const thead = document.querySelector('thead');
        const html = document.documentElement;
        const body = document.body;
        const tableHeadCells = document.querySelectorAll('table thead th');

        const serverHost = 'http://localhost:8080';
        const socket = new WebSocket("wss://kr-ss{{serverId}}.chat.naver.com/chat");
        connect();

        // 치지직 웹소켓 연결
        socket.onopen = function() {
            let initialRequest = {
                "ver": "2",
                "cmd": 100,
                "svcid": "game",
                "cid": '{{chatChannelId}}',
                "bdy": {
                    "uid": null,
                    "devType": 2001,
                    "accTkn": '{{accessToken}}',
                    "auth": "READ"
                },
                "tid": 1
            };

            socket.send(JSON.stringify(initialRequest));
            socket.onmessage = function(event) {
                let data = JSON.parse(event.data);
                stompClient.send("/app/api/v1/chat/{{playlistId}}", {}, JSON.stringify(data));

                if (data.ver === "2" && data.cmd === 0) {
                    socket.send(JSON.stringify({ "ver": "2", "cmd": 10000 }));
                }
            };

            setInterval(function() {
                socket.send(JSON.stringify({ "ver": "2", "cmd": 0 }));
            }, 1000);
        };

        // STOMP 연결
        function connect() {
            const socket = new SockJS('/wss');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function() {
                // 메시지 받기
                stompClient.subscribe('/sub/message/{{playlistId}}', function(message) {
                    const musicData = JSON.parse(message.body);
                    const exists = musicList.some(music => music.title === musicData.title && music.artist === musicData.artist);
                    if (!exists) list();
                });
            });
        }

        // STOMP에 메시지 보내기
        function sendMessage() {
            stompClient.send("/app/api/v1/message/{{playlistId}}", {}, JSON.stringify({
                artist: document.getElementById("artist").value,
                title: document.getElementById("musicTitle").value
            }));
        }

        // 추가하려고 하는데 input의 값이 아무것도 없을떄
        document.getElementById("send").addEventListener("click", function() {
            if (!(document.getElementById("artist").value === '' && document.getElementById("musicTitle").value === '')) {
                sendMessage();
                document.getElementById("artist").value = '';
                document.getElementById("musicTitle").value = '';
            }
        });

        // 재생되고 있는 곡을 하이라이트하기 위해
        function playBackgroundColor() {
            const rows = document.querySelectorAll('#musicTable tbody tr');
            rows.forEach((row, number) => {
                if (number === index) {
                    row.style.backgroundColor = '#e7e7e7';
                    row.style.borderTopLeftRadius = '10px'
                    row.style.borderBottomLeftRadius = '10px'
                    row.style.borderTopRightRadius = '10px'
                    row.style.borderBottomRightRadius = '10px'
                } else {
                    row.style.backgroundColor = '';
                }
            });
        }

        // 음악 추가 했을떄
        function create() {
            const rows = document.querySelectorAll('#musicTable tbody tr');
            rows.forEach((row, number) => {
                if (number === index) {
                    row.style.backgroundColor = 'rgb(201,201,202,0.0)';
                    row.style.borderTopLeftRadius = '10px'
                    row.style.borderBottomLeftRadius = '10px'
                    row.style.borderTopRightRadius = '10px'
                    row.style.borderBottomRightRadius = '10px'
                } else {
                    row.style.backgroundColor = '';
                }
            });

            tableHeadCells.forEach((th) => {
                th.style.backgroundColor = 'rgb(211,211,211)';
            });

            controls.style.opacity = '1';
            controls.style.visibility = 'visible';
            html.style.background = 'rgba(143,143,143,0.4)';
            thead.style.background = 'rgba(143,143,143,0.4)';
            thead.style.zIndex = '0';
            thead.style.position = 'static';
            body.style.background = 'rgb(201,201,202,0.0)';
        }

        // 음악 추가 버튼을 눌렀을떄
        function add() {
            if (document.getElementById("artist").value === '' && document.getElementById("musicTitle").value === '') alert("아티스트와 제목을 입력해주세요");
            else {
                controls.style.opacity = '0';
                controls.style.visibility = 'hidden';
                html.style.background = '#eeeeee';
                body.style.background = '#eeeeee';
                thead.style.background = '#eeeeee';
                thead.style.zIndex = '1';
                thead.style.position = 'sticky';

                playBackgroundColor();
                tableHeadCells.forEach((th) => {
                    th.style.backgroundColor = '#eeeeee';
                });
            }
        }

        // 음악 추가 취소 버튼을 눌렀을떄
        function cancel() {
            document.getElementById("artist").value = '';
            document.getElementById("musicTitle").value = '';
            controls.style.opacity = '0';
            controls.style.visibility = 'hidden';
            html.style.background = '#eeeeee';
            body.style.background = '#eeeeee';
            thead.style.background = '#eeeeee';
            thead.style.zIndex = '1';
            thead.style.position = 'sticky';

            playBackgroundColor();
            tableHeadCells.forEach((th) => {
                th.style.backgroundColor = '#eeeeee';
            });
        }

        // Play 버튼을 눌렀을떄
        function play() {
            const title = document.getElementById("title");
            if (title.innerText === '-') {
                reproduction.src = 'play.png';
                playCurrentAudio(0);
                count = 0;
                playBackgroundColor();
            } else if (lastIndex === 1 && count === 1) {
                index = 0;
                playCurrentAudio(index);
                count = 0;
                lastIndex = 0;
            } else if (count === 0) {
                reproduction.src = 'stop.png';
                audioPlayer.pause();
                isPlaying = false;
                count++;
            } else if (count === 1) {
                if (currentIndex === -1) currentIndex++
                reproduction.src = 'play.png';
                audioPlayer.play();
                isPlaying = true;

                const title = document.getElementById("title");
                if (title.innerText === '-') playCurrentAudio(0);

                count = 0;
            } else if (audioPlayer.duration > 0) {
                reproduction.src = 'play.png';
                seekSlider.value = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                audioPlayer.play();
                isPlaying = true;
            }
        }

        let num = 0;
        // 테이블 추가
        function addMusicTable() {
            const tbody = document.getElementById('musicTable').querySelector('tbody');
            tbody.innerHTML = '';

            musicList.forEach((musicData, currentIndex) => {
                // 순서
                const newRow = document.createElement("tr");
                const td1 = document.createElement("td");
                td1.style.width = '50px';
                td1.textContent = `${currentIndex + 1}`;

                // 제목
                const td2 = document.createElement("td");
                const image = document.createElement("div");
                image.className = 'image-div';
                const title = document.createElement("div");
                title.className = 'title-div';
                const songTitle = document.createElement("span");
                songTitle.className = "song-title";
                songTitle.textContent = musicData.title;
                songTitle.onclick = () => playCurrentAudio(currentIndex);

                // 앨범 이미지
                const album = document.createElement("img");
                if (`${musicData.image}` === 'null') {
                    album.className = 'album2';
                    album.src = 'musicIcon.png';
                } else {
                    album.className = 'album';
                    album.src = `data:image/png;base64,${musicData.image}`;
                }

                // 아티스트
                const artist = document.createElement("span");
                artist.className = "artist";
                artist.textContent = musicData.artist;
                image.appendChild(album);
                title.appendChild(songTitle);
                title.appendChild(artist);
                image.appendChild(title);
                td2.appendChild(image);

                // 시간
                const td3 = document.createElement("td");
                td3.className = "table-time";
                td3.textContent ='00:00';

                const byteCharacters = atob(musicData.musicFileBytes);
                const byteNumbers = new Uint8Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
                const url = URL.createObjectURL(blob);

                const timeAudioPlayer = new Audio(url);
                timeAudioPlayer.addEventListener('loadedmetadata', function() {
                    td3.textContent = formatTime(timeAudioPlayer.duration);
                    timeAudioPlayer.pause();
                });

                // 후원자
                const td4 = document.createElement("td");
                td4.textContent = donationUser(musicData);

                // 삭제
                const td5 = document.createElement("td");
                const deleteLink = document.createElement("a");
                deleteLink.href = "javascript:void(0);";
                deleteLink.id = "delete1";
                const deleteImg = document.createElement("img");
                deleteImg.src = "delete.png";
                deleteImg.id = "delete";
                deleteLink.appendChild(deleteImg);
                td5.appendChild(deleteLink);

                newRow.appendChild(td1);
                newRow.appendChild(td2);
                newRow.appendChild(td3);
                newRow.appendChild(td4);
                newRow.appendChild(td5);
                tbody.appendChild(newRow);

                // 해당 열을 클릭했을때
                newRow.addEventListener("click", function(event) {
                    const cells = newRow.querySelectorAll("td");
                    const rowData = Array.from(cells).map(cell => cell.textContent);
                    num = rowData.find(num => num > 1);

                    newRow.addEventListener('dblclick', function () { // 해당 셀을 더블 클릭시 음악 재생
                        const cells = newRow.querySelectorAll("td");
                        const rowData = Array.from(cells).map(cell => cell.textContent);
                        let selfIndex = rowData.find(num => num > 1);

                        if (num === selfIndex) {
                            this.currentIndex = 0;
                            index = currentIndex;
                            playCurrentAudio(currentIndex);
                            count = 0;
                            lastIndex = 0;
                        }
                    });

                    if (event.target === deleteImg) { // 삭제 이미지 클릭했을 시
                        event.preventDefault();
                        const cells = newRow.querySelectorAll("td");
                        const rowData = Array.from(cells).map(cell => cell.textContent);

                        let selfIndex = rowData.find(num => num > 1);
                        fetch(`/api/v1/delete?playlistId={{playlistId}}&artist=${musicData.artist}&title=${musicData.title}`, { method: 'GET' }).then(response => {
                            if (response.ok) list();

                            if (selfIndex === `${index + 1}`) {
                                if (`${selfIndex - 1}` === `${musicList.length - 1}`) {
                                    if (reproduction.src === `${serverHost}/stop.png`) {
                                        audioPlayer.play();
                                        isPlaying = true;
                                        audioPlayer.currentTime = audioPlayer.duration;
                                        index = musicList.length - 1;
                                        return;
                                    }
                                    audioPlayer.currentTime = audioPlayer.duration;
                                    index = musicList.length - 1;
                                    return;
                                } else playCurrentAudio(++index);

                                --index;
                            } else {
                                if (`${index + 1}` === `${selfIndex - 1}`) {
                                    // console.log("처음곡 바로 다음 곡 삭제");
                                } if (selfIndex < `${index}` || selfIndex > `${index}`) {
                                    // console.log("들어왔음");
                                } else if (index === 0) {
                                    // 대충 설명하자면 처음 곡을 삭제하면 그 다음곡이 재생되고 index를 처음 곡으로 맞추기 위해서 0으로 만듬.
                                    if (reproduction.src === `${serverHost}/stop.png` && `${selfIndex - 1}` === `${musicList.length - 1}`) {
                                        // console.log("마지막 곡");
                                    } else if (index === musicList.length - 1) {
                                        // console.log("더 이상 곡이 없습니다.");
                                        audioPlayer.currentTime = audioPlayer.duration;
                                    } else {
                                        playCurrentAudio(++index);
                                        index = 0;
                                    }
                                } else if (selfIndex - 1 === musicList.length - 1 && index - 1 === musicList.length - 1) {
                                    audioPlayer.currentTime = audioPlayer.duration;
                                    --index;
                                } else if (index === selfIndex) playCurrentAudio(++index); else {
                                     if (selfIndex === `${0}`) playCurrentAudio(++index);
                                     --index;
                                }
                            }
                        });
                    } else if (event.target === td5) { // 삭제 열을 클릭했을 시
                        event.preventDefault();
                    }
                });
                playBackgroundColor();
            });
        }

        // 후원자 이름 여부
        function donationUser(data) {
            const user = data.donationUser;
            if (user === null) return '-'
            return user;
        }

        // Blob으로 변환해서 Play
        function playCurrentAudio(index) {
            const reproduction = document.getElementById("reproduction");
            const title = document.getElementById("title");

            if (title.innerText === '-') {
                if (index === 0 && index === musicList.length) {
                    reproduction.src = "stop.png";
                    alert('음악을 추가해주세요!');
                    return;
                }

                const indexData = musicList[index];
                const byteCharacters = atob(indexData.musicFileBytes);
                const byteNumbers = new Uint8Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
                audioPlayer.src = URL.createObjectURL(blob);
                audioPlayer.play();
                isPlaying = true;
                reproduction.src = "play.png";
                title.innerText = indexData.title;
                playBackgroundColor();
            } else {
                const indexData = musicList[index];
                const byteCharacters = atob(indexData.musicFileBytes);
                const byteNumbers = new Uint8Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const blob = new Blob([byteNumbers], { type: 'audio/mpeg' });
                audioPlayer.src = URL.createObjectURL(blob);
                audioPlayer.play();
                isPlaying = true;
                reproduction.src = "play.png";
                title.innerText = indexData.title;
                playBackgroundColor();
            }
        }

        // 음악에 대한 시간
        function formatTime(seconds) {
            if (isNaN(seconds)) return '00:00';
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
        }

        // 음악이 재생될때의 시간을 업데이트해서 뷰에 반영하는거임
        audioPlayer.addEventListener("timeupdate", function() {
            const current = formatTime(audioPlayer.currentTime);
            const duration = formatTime(audioPlayer.duration);

            if (index === 0 && audioPlayer.currentTime < 1) {
                before.src = 'beforeProhibition.png';
                beforeA.style.cursor = 'not-allowed';
            } else if (audioPlayer.currentTime < 1) {
                before.src = 'before.png';
                beforeA.style.cursor = 'pointer';
            }

            if (index === musicList.length - 1 && audioPlayer.currentTime < 1) {
                next.src = 'nextProhibition.png';
                nextA.style.cursor = 'not-allowed';
            } else if (audioPlayer.currentTime < 1) {
                next.src = 'next.png';
                nextA.style.cursor = 'pointer';
            } else if (index < musicList.length - 1 && next.src !== `${serverHost}/next.png`) {
                next.src = 'next.png';
                nextA.style.cursor = 'pointer';
            }

            if (audioPlayer.duration > 0) {
                seekSlider.value = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                seekSlider.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${seekSlider.value}%, rgb(112, 112, 112) ${seekSlider.value}%)`
                currentTime.innerText = current;
                totalTime.innerText = duration;
                savedTime = current;
            }
        });

        let nowIndex = 0;
        let lastIndex = 0;
        // 이놈은 음악이 끝났을때 호출됨
        audioPlayer.addEventListener("ended", function() {
            seekSlider.style.background = 'rgb(112, 112, 112)'
            currentTime.innerText = '00:00';
            seekSlider.value = 0;

            reproduction.src = 'stop.png';
            audioPlayer.pause();
            isPlaying = false;

            if (repeat.src === `${serverHost}/repeat.png`) {
                count = 0;
                if (index === musicList.length - 1) {
                    lastIndex++;
                    count++;
                }
            } else {
                count = 0;
            }

            currentIndex = index;
            nowIndex = index;
            if (currentIndex === musicList.length - 1) {
                // console.log("마지막 곡이었습니다.");
                currentIndex = 0;
                // index = 0;
                if (repeat.src === `${serverHost}/repeating.png`) {
                    index = 0;
                    playCurrentAudio(index);
                } else {
                    currentIndex--;
                    let timeId = setInterval(function() {
                        if (currentIndex === -1 && nowIndex < musicList.length - 1) {
                            index = musicList.length - 1;
                            currentIndex = nowIndex;
                            playCurrentAudio(index);
                            clearInterval(timeId);
                        }
                    }, 1000);
                }
            } else {
                index++;
                playCurrentAudio(index);
            }
        });

        // 얘가 슬라이더 움직일때 음악의 시간도 변하게하는거임
        document.getElementById("seekSlider").addEventListener("input", function() {
            audioPlayer.currentTime = audioPlayer.duration * (this.value / 100);
        });

        // 슬라이더 움직일때 색상 변화
        seekSlider.addEventListener('input', function() {
            const value = (seekSlider.value - seekSlider.min) / (seekSlider.max - seekSlider.min) * 100;
            seekSlider.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
        });

        // 볼륨 조절
        document.getElementById("volumeControl").addEventListener("input", function() {
            audioPlayer.volume = this.value;
        });

        // 이전 곡으로 넘어가는 함수
        const before = document.getElementById("before");
        const beforeA = document.getElementById('before-a');
        function beforePlay() {
            if (index === 0 && beforeA.style.cursor === 'not-allowed') {
                // console.log("이전 곡이 없습니다.");
                before.src = 'beforeProhibition.png';
            } else {
                list();
                before.src = 'before.png';
                playCurrentAudio(--index);
                count = 0;
            }
        }

        // 다음 곡으로 넘어가는 함수
        const next = document.getElementById("next");
        const nextA = document.getElementById('next-a');
        function nextPlay() {
            if (index === musicList.length - 1 && nextA.style.cursor === 'not-allowed') {
                // console.log("다음 곡이 없습니다.");
                next.src = 'nextProhibition.png';
            } else {
                list();
                next.src = 'next.png';
                playCurrentAudio(++index);
                count = 0;
            }
        }

        const audioSoundA = document.getElementById('audio-a');
        let playSound = volumeControl.value;
        // 음소거 이미지에 따른 볼륨
        function audioSound() {
            if (audio.src === `${serverHost}/audio_negative.png`) {
                playSound = volumeControl.value;
                audio.src = 'mute.png';
                audio.style.width = '20px';
                audio.style.marginRight = '13px';
                audioPlayer.muted = true;
                volumeControl.value = 0;
            } else {
                audio.src = 'audio_negative.png';
                audio.style.width = '26px';
                audio.style.marginRight = '7px';
                audioPlayer.muted = false;
                volumeControl.value = playSound;
                audioPlayer.volume = playSound;
            }

            const value = (volumeControl.value - volumeControl.min) / (volumeControl.max - volumeControl.min) * 100;
            volumeControl.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
        }

        // 볼륨 조절할떄 이미지 및 색상 변경
        const audio = document.getElementById('audio');
        volumeControl.addEventListener('input', function() {
            const value = (volumeControl.value - volumeControl.min) / (volumeControl.max - volumeControl.min) * 100;
            if (value < 1 && audio.src === `${serverHost}/mute.png`) {
                audio.src = 'audio_negative.png'
                audio.style.width = '26px'
                audio.style.marginRight = '7px'
                volumeControl.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
                audioPlayer.muted = false;
            } else if (value === 0) {
                audio.src = 'mute.png'
                audio.style.width = '20px'
                audio.style.marginRight = '13px'
                volumeControl.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
                audioPlayer.muted = true;
            } else if (value > 0 && audio.src === `${serverHost}/mute.png`) {
                audio.src = 'audio_negative.png'
                audio.style.width = '26px'
                audio.style.marginRight = '7px'
                volumeControl.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
                audioPlayer.muted = false;
            } else {
                volumeControl.style.background = `linear-gradient(to right, rgb(0, 0, 0) ${value}%, rgb(112, 112, 112) ${value}%)`;
                audioPlayer.muted = false;
            }
        });

        // 반복 이미지 변경
        repeatLink.addEventListener('click', (event) => {
            if (playCount === 0) {
                repeat.src = 'repeating.png';
                playCount++;
            } else {
                repeat.src = 'repeat.png';
                playCount = 0;
            }

            const rect = repeatLink.getBoundingClientRect();
            if (event.clientX < rect.left || event.clientX > rect.right || event.clientY < rect.top || event.clientY > rect.bottom) {
                event.preventDefault();
            }
        });

        document.addEventListener('scroll', checkTablePosition);
        window.addEventListener('resize', checkTablePosition);
        window.addEventListener('load', checkTablePosition);
        // 뷰 높이에 따른 재생바 위치 변경
        function checkTablePosition() {
            const table = document.querySelector('table');
            console.log("Viewport Height: " + document.documentElement.clientHeight);
            console.log("Window Height: " + window.innerHeight);
            table.style.maxHeight = `${window.innerHeight - 270}px`;
        }

        // DB에 저장되어있는 데이터를 불러와 자바스크립트 배열에 추가
        async function list() {
            await fetch("/api/v1/list/{{playlistId}}").then(response => response.json()).then(data => {
                musicList = data;
                addMusicTable();
            });
        }
        list();
    </script>
</body>
</html>